# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  workflow_dispatch:
  schedule:
    - cron: "1 1 */7 * *"
#   create:
#     tags:
#       - v*

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-24.04
    name: Build on ${{ matrix.distro }} ${{ matrix.arch }}
#     strategy:
#       matrix:
#         include:
#           - arch: aarch64
#             distro: ubuntu18.04

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
         ref: master

      # Runs a single command using the runners shell
      - name: prepare
        run: sudo apt update && sudo apt install gcc-aarch64-linux-gnu texlive libssl-dev  libgmp-dev gettext autoconf pkg-config
      - name: checkoutDnsmasq
        run: git clone http://thekelleys.org.uk/git/dnsmasq.git dnsmasq.git

        
     
      - name: patching 
        run: |
             cd dnsmasq.git 

             sed -i '/#include <sys\/stat.h>/a __asm__(".symver stat64,__xstat64@GLIBC_2.17");' src/dnsmasq.h
             sed -i '/#include <fcntl.h>/a __asm__(".symver fcntl64,fcntl@GLIBC_2.17");' src/dnsmasq.h
             sed -i '/#include <fcntl.h>/a __asm__(".symver fcntl64,fcntl@GLIBC_2.17");' src/tables.c
       
             cd ..
             

      - name: Use Ubuntu 18.04 Docker Image
        run: |
          docker run --rm -v $(pwd):/workspace -w /workspace  homebrew/ubuntu18.04 bash -c "
          sudo apt-get update
          sudo apt update
          sudo apt-get update &&sudo apt-get install -y build-essential  libc6  texlive libssl-dev  libgmp-dev gettext autoconf pkg-config cmake    gcc-aarch64-linux-gnu
          export CC=aarch64-linux-gnu-gcc
          export CXX=aarch64-linux-gnu-g++
          export LD=aarch64-linux-gnu-ld
          export AR=aarch64-linux-gnu-ar
          sudo unzip nettle-nettle_3.10.1_release_20241230.zip
          sudo cd nettle-nettle_3.10.1_release_20241230 
          sudo bash .bootstrap 
          sudo  bash configure --enable-mini-gmp --disable-documentation --host=aarch64-linux-gnu 
          sudo make
          sudo make install && cd .. &&chmod +x build.sh &&sudo bash build.sh
          "        

 
      # Runs a set of commands using the runners shell
      # - name: loadFile
      #   run:  unzip nettle-nettle_3.10.1_release_20241230.zip && cd nettle-nettle_3.10.1_release_20241230 &&./.bootstrap && ./configure --enable-mini-gmp --disable-documentation --host=aarch64-linux-gnu &&make &&sudo make install && cd ..
      # - name: build
      #   run: chmod +x build.sh &&./build.sh

      - name: dist
        run: git status &&git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com" &&  git config --local user.name "github-actions[bot]" &&git add dnsmasq CHANGELOG httping &&git commit -m "update by bot"
      - uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: master
 #
